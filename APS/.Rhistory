runApp()
View(EvalRCOres)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
runApp()
runApp()
library(APS)
runApp()
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
runApp()
runApp()
colnames(RCO_res_l$settings_df)
colnames(RCO_res_l$details_ma)
row.names(RCO_res_l$details_ma)
runApp()
runApp()
runApp()
EvalRCOres$settings_df[,available_x_values_v]
EvalRCOres$settings_df
available_x_values_v
colnames(EvalRCOres$settings_df)
which(available_x_values_v)%in%colnames(EvalRCOres$settings_df)
which(available_x_values_v%in%colnames(EvalRCOres$settings_df))
runApp()
colnames(RCO_res_l$settings_df)
colnames(RCO_res_l$details_ma)
row.names(RCO_res_l$details_ma)
runApp()
input$ycol
debug(APS::compareRCOruns)
View(opt_res_df)
yaxis
yaxis
opt_res_df[,yaxis]
library(APS)
runApp()
debug(APS::compareRCOruns)
runApp()
undebug(compareRCOruns)
runApp()
nrow(RCO_res_l$details_ma)
nrow(RCO_res_l$rw_ma)
ncol(RCO_res_l$rw_ma)
runApp()
runApp()
runApp()
colnames(RCO_res_l$settings_df)
runApp()
runApp()
selectedData()
input$ycol
input$xcol
input$xcol
runApp()
runApp()
set_with_sev_opt_v
runApp()
runApp()
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
runApp()
library(APS)
runApp()
library(APS)
runApp()
# This file is modified by Aliaksandr Panko (PAA) 11.02.20
# Bugs with -Inf have been fixed
library(pdftools)
# Set digits length for "as.numeric" function
options(digits=9)
# Check all folders within the parent directory:
dir <- list.dirs(path = "L:/FAP/Manager Selection/Portfolios/Passive Produkte/BlackRock/Global and Country EM/Monitoring/MSCI Factsheet",
full.names = TRUE,
recursive = TRUE)
# Get all files within the directory:
files <-  list.files(path = max(dir),
full.names = TRUE,
recursive = TRUE)
# To check if files are of the right type
num_pdf_files <- length(grep(pattern = ".pdf",x = files))
num_all_files <- length(files)
if(num_pdf_files == num_all_files){
# This means there are only .pdf files (required for pdf_text function)
# Set list to record data:
output <- list(Index = NULL, Date = NULL, MktCap = NULL)
for (i in 1:length(files)){
# Read pdf file:
text <- pdf_text(files[i])
# Remove spaces:
text2 <- gsub("  ","",text)
# Split text at "\r\n" tags:
text3 <- strsplit(text2, "\r\n")
# Supstitute "," with blanks for numeric values in Line 8 page 2:
# Line number depends of pdf format for 02.20 line is 9
line8page2 <- text3[[2]][9]
# Substitute all letters with space
l8p2_num_only <- gsub(pattern = "([[:alpha:]])", replacement = " ", x = line8page2)
# from many space make only single space (however traling and leading are still present)
l8p2_single_spaces <- gsub(pattern = "\\s+", replacement = " ", x = l8p2_num_only)
# Delete traling and leading spaces
l8p2_single_space <- trimws(l8p2_single_spaces)
# there should not be any "," in a number. (thousands should not be separated)
l8p2_correct_numbers <- gsub(pattern = ",", replacement = "", x = l8p2_single_space)
# Get only numbers
char_vector <- strsplit(x = l8p2_correct_numbers, split = " ")[[1]]
# Convert character "numbers" to actual numbers
# we do not need worings here, they are expected
num_vector <- suppressWarnings(as.numeric(char_vector))
# Remove NA
num_vector <- num_vector[!is.na(num_vector)]
# The market cap should be the first number in a vector
requited_number <- num_vector[1]
output$MktCap[i] <- requited_number
# # Catch Index name:
output$Index[i] <- text3[[1]][1]
#Catch data:
output$Date[i] <- text3[[2]][1]
}
# Write the data in a csv file:
write.table(as.data.frame(output), file = paste0(max(dir),"/indexData.csv"), sep=";", row.names = F)
cat("The output document is completed successfully!")
}else{
stop("There are non-pdf files in the folder. Please remove them (check indexData.csv) and try again")
}
runApp()
library(APS)
runApp()
2 =2
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
?graphics::text()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
plot_side_constraints <- function(single_set_df,
orc,
targ_fun_val){
# Total risk budget deviation = sum (ABS(RC_i - RB_i))
# Total actual portfolio TE
# ABS(Total actual portfolio TE - Target Total portfolio TE)
# Actual Net Investment
# Index Position
# Portfolio Beta
#side constraints
side_constraints <- c(TotRBDev = orc$total_rb_dev,
ActPortfTE = orc$te,
'ActTE-TargTE' = orc$te - single_set_df$TargetTE,
ActNetInv = orc$NetInvestment,
IndexPosition = orc$IndexPosition,
Beta = orc$p.Beta,
TargFunVal = targ_fun_val, 3)
title_part1 <- paste0("Settings set ",single_set_df$setID,": ")
title_part2 <- paste("Constraints")
color <- c(rep("black", 7))
names(color) <- c("TotRBDev",
"ActPortfTE",
"ActTE_M_TargTE",
"ActNetInv",
"IndexPosition",
"Beta",
"TargFunVal")
# Set color for Net Investment
if(orc$NetInvestment < 0){
color["ActNetInv"] = ifelse(abs(orc$NetInvestment) > single_set_df$CashTolerance,
"red", "black")
}else{
color["ActNetInv"] = ifelse(abs(orc$NetInvestment) > single_set_df$LeverageTolerance,
"red", "black")
}
side_constraints_bp <- graphics::barplot(side_constraints,
main = paste0(title_part1, title_part2),
las = 1,
col = color)
graphics::text(side_constraints_bp,
side_constraints + 0.0025 * sign(side_constraints),
labels = round(side_constraints, 3))
}
debug(plot_side_constraints)
runApp()
library(APS)
runApp()
debug(APS::plotSingleSetIDfromRCOres)
side_constraints
color
abs(orc$NetInvestment)
abs(orc$NetInvestment) > single_set_df$CashTolerance
color
color["ActNetInv"] = ifelse(2>1,
"red", "grey")
color
side_constraints_bp <- graphics::barplot(side_constraints,
main = paste0(title_part1, title_part2),
las = 1,
col = color)
?ggplot()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
d <- c(a = 4,b = 5)
f
d
as.data.frame(d)
d <- data.frame(a = 5, b= 3)
d
library(APS)
runApp()
debug(APS::plotSingleSetIDfromRCOres)
orc$total_rb_dev
orc$te
orc$te - single_set_df$TargetTE
orc$NetInvestment
orc$IndexPosition
orc$p.Beta
orc$p.Beta <- 0.3
targ_fun_val
orc$p.Beta <- 0.5
View(side_constraints)
factor(1:length(side_constraints)
factor(1:length(side_constraints))
factor(1:length(side_constraints))
Q
library(APS)
library(APS)
runApp()
library(APS)
runApp()
f <- c(a = 3,b = 3)
data.frame(f)
colnames(f)
row.names(f)
rownames(f)
row.names(f)
f
f
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
d
as.vector(d)
d <- as.vector(d)
d
d[1]
data.frame(n=names(d),v = d)
as.data.frame(d)
data.frame(d)
d
c(d = 3,b = 2)
r <- c(d = 3,b = 2)
data.frame(r)
r[,1]
r
class(r)
data.frame(r)[,1]
data.frame(r)[,2]
data.frame(r)[,1]
data.frame(r)[1,]
row.names(data.frame(r))
library(APS)
runApp()
library(APS)
runApp()
runApp()
library(APS)
runApp()
debug(APS::plotSingleSetIDfromRCOres)
class(RCOres_l$details_ma)
View(RCOres_l$details_ma)
View(RCOres_l$settings_df)
View(RCOres_l$details_ma)
RCOres_l$details_ma[,"set1"]
class(RCOres_l$details_ma[,"set1"])
class(RCOres_l$details_ma[,1])
setid
runApp()
debug(APS::plotSingleSetIDfromRCOres)
class(single_opt_det_v)
single_opt_det_v
ShortIndexWithOptimCash
orc$rw_impl
RCO_res_l$details_ma[,"set1"]
RCO_res_l$details_ma[,"set1"]
View(RCO_res_l$settings_df)
runApp()
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
runApp()
runApp()
runApp()
runApp()
runApp()
debug(APS::plotSingleSetIDfromRCOres)
risk_contributions_v
lb_v
rc_act_v
risk_contributions_v
length(risk_contributions_v)
length(convictions_v)
length(convictions_v != 0)
length(rw_v)
rw_v
View(targ_input_df)
View(convictions_v)
convictions_v[14] == 0
risk_contributions_v
runApp()
debug(APS::plotSingleSetIDfromRCOres)
length(lb_act_v)
rc_act_v
rb_act_v
tickers_act_v
txtsize
single_opt_det_v["total_rb_dev"]
library(APS)
runApp()
runApp()
runApp()
debug(APS::plotSingleSetIDfromRCOres)
single_opt_det_v
runApp()
single_opt_det_v
View(single_opt_det_v)
runApp()
library(APS)
runApp()
runApp()
debug(APS::plotSingleSetIDfromRCOres)
single_opt_det_v
single_opt_det_v
View(side_constraints_df)
side_constraints
single_opt_det_v
?as.numeric()
runApp()
runApp()
debug(APS::plotSingleSetIDfromRCOres)
single_opt_det_v
single_opt_det_v
View(side_constraints_df)
side_constraints
side_constraints
runApp()
runApp()
?datatable()
runApp()
round(as.Date(2020-01-01),3)
as.Date(2020-01-01)
as.Date(01-01-2020)
as.Date("2020-01-01")
round(as.Date("2020-01-01"),3)
runApp()
runApp()
View(selectedData()$details_ma)
selectedData()$details_ma[,setWindowTitle()]
selectedData()$details_ma[,1]
class(selectedData()$details_ma[,1])
class(selectedData()$details_ma[,1, drop = F])
selectedData()$details_ma[,1, drop = F]
runApp()
View(union_df)
runApp()
f <- c(1,2,3)
which(f = c(1,3))
which(f == c(1,3))
f
which(f == 1)
which(f == 3)
which(f %in% c(1,2))
which(f %in% c(1,3))
f <- c(4,2,3,1)
which(f %in% c(1,3))
match(c(1,3),f)
runApp()
runApp()
!which(all_ind_v %in% ind_v)
which(all_ind_v %in% ind_v)
all_ind_v
all_ind_v %in% c(1,2,3)
runApp()
a <-  c(1,2,3)
b %in% a
b <- c(a,4,5,6)
b %in% a
b[b%in%a]
b[!b%in%a]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ncol(EvalRCOres$rw_ma)
runApp()
runApp()
runApp()
runApp()
