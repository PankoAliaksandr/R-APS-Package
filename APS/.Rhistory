debug(APS::plotSingleSetIDfromRCOres)
risk_contributions_v
runApp()
library(APS)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
runApp()
runApp()
debug(APS::plotSingleSetIDfromRCOres)
library(APS)
runApp()
runApp()
library(APS)
runApp()
runApp()
library(APS)
runApp()
?ggtitle
APS::compareRCOruns(setid = 1,RCOres_l = RCOres_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
library(APS)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
debug(compareRCOruns)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
class(opt_res_df[,1])
class(opt_res_df[,2])
class(opt_res_df[,3])
class(RCOres_l$details_ma[1,]
)
class(RCOres_l$settings_df[1,]
)
class(RCOres_l$settings_df[,1]
)
class(t(RCOres_l$details_ma[,1]))
class(t(RCOres_l$details_ma[,2]))
View(Ores_l$details_ma[,1]))
View(RCOres_l$details_ma[,1]))
View(RCOres_l$details_ma[,1])
round(RCOres_l$details_ma,3)
round(RCOres_l$details_ma[seq(2:11),],3)
RCOres_l$details_ma[seq(2:11),]
View(RCOres_l$details_ma)
View(RCOres_l$settings_df)
class(RCOres_l$details_ma)
details_df <- as.data.frame(t(RCOres_l$details_ma))
View(details_df)
opt_res_df <- cbind(details_df, RCOres_l$settings_df)
View(opt_res_df)
class(RCOres_l$settings_df[,1])
class(RCOres_l$settings_df[,2])
class(RCOres_l$settings_df[,3])
class(RCOres_l$settings_df[,7])
class(RCOres_l$settings_df[,"IndexFlex"])
library(APS)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
library(APS)
runApp()
library(APS)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
library(APS)
APS::compareRCOruns(setid = 1,RCOres_l = RCO_res_l,yaxis="total_rb_dev",xaxis="setID",group_by="TargetTE",current_point=1)
runApp()
rownames(RCO_res_l$details_ma)
library(APS)
debug(APS::runRCOLoops)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
View(single_optim_details_df)
single_optim_details_df <- data.frame("Calculated" = as.character(Sys.time()),
"TEact-TEtarg" = orc$te - set$TargetTE,
"%weight_limits_hit" = orc$const_hit_pct,
"NetInvestment" = orc$NetInvestment,
"PortBeta" = orc$p.beta,
"IndexPosition" = orc$IndexPosition,
"target_function_value" = opt_output$objective,
"iterations" = iterations,
"calctime" = calctime,
"total_rb_dev" = orc$total_rb_dev,
"validResult" = validResult,
row.names = NULL)
View(single_optim_details_df)
single_optim_details_df <- data.frame("Calculated" = as.character(Sys.time()),
"PortfTEDev" = orc$te - set$TargetTE,
"HitsPct" = orc$const_hit_pct,
"NetInvestment" = orc$NetInvestment,
"PortfBeta" = orc$p.beta,
"IndexPosition" = orc$IndexPosition,
"ObjFunValue" = opt_output$objective,
"Iterations" = iterations,
"Calctime" = calctime,
"TotalRBDev" = orc$total_rb_dev,
"ValidResult" = validResult,
row.names = NULL)
View(single_optim_details_df)
class(single_optim_details_df$ValidResult)
class(single_optim_details_df$HitsPct)
View(f.runRCO())
View(f.runRCO)
View(*APS)
View(APS)
library(APS)
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHSM"
call_params[2] = "2020-03-31"
call_params[3] = "313"
call_params[4] = "42"
call_params[5] = 0
debug(APS::runRCOFromAPS)
print(paste0("portfolioName = ", call_params[1]))
print(paste0("calculation_date = ", call_params[2]))
print(paste0("covMaSetID = ", call_params[3]))
print(paste0("RCOSetID = ", call_params[4]))
# Check that the packages have not been deleted...
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 10 14:31:23 2020 ------##
View(target_table)
class(target_table$conviction)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-02-14"
call_params[3] = "297"
call_params[4] = "37"
call_params[5] = 0
print(paste0("portfolioName = ", call_params[1]))
print(paste0("calculation_date = ", call_params[2]))
print(paste0("covMaSetID = ", call_params[3]))
print(paste0("RCOSetID = ", call_params[4]))
# Check that the packages have not been deleted...
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 10 14:35:01 2020 ------##
print(paste0("portfolioName = ", call_params[1]))
print(paste0("calculation_date = ", call_params[2]))
print(paste0("covMaSetID = ", call_params[3]))
print(paste0("RCOSetID = ", call_params[4]))
# Check that the packages have not been deleted...
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 10 14:35:18 2020 ------##
library(APS)
debug(APS::runRCOFromAPS)
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
optimization_result_l$optim_details$ValidResult
optimization_result_l$optim_details
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
calcdatetime
opt_weights_relative_v
opt_weights_portfolio_v
portfolioName
covMaSetID
RCOSetID
calcdatetime
library(APS)
debug(APS::runRCOFromAPS)
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
optim_details_df <- data.frame()
rbind(optim_details_df, optim_details_df)
library(APS)
debug(APS::runRCOLoops)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
set_df$InputParameters
library(APS)
debug(APS::runRCOLoops)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
View(optim_details_df)
View(optim_details_df)
class(RCOthisLoop$optim_details$Calculated)
class(RCOthisLoop$optim_details$HitsPct)
class(RCOthisLoop$optim_details$ValidResult)
names(RCOres_l)
debug(f.writeOptdetails2xlsx)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
library(APS)
debug(f.writeOptdetails2xlsx)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
View(RCOres_l$rw_ma)
View(RCOres_l$details_ma)
View(RCOres_l$details_df)
View(t(RCOres_l$rw_ma))
View(cbind(t(RCOres_l$rw_ma), RCOres_l$details_df)
)
View(rbind(RCOres_l$rw_ma, t(RCOres_l$details_df))
)
class(rbind(RCOres_l$rw_ma, t(RCOres_l$details_df)))
library(APS)
debug(f.writeOptdetails2xlsx)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
View(optres_ma)
View(pr.optres_ma)
View(optres_ma)
pr.optres_ma <- rbind(as.matrix(t_settings_df), as.matrix(optres_ma))
View(pr.optres_ma)
colnames(RCO_res_l$details_df)
colnames(RCO_res_l$settings_df)
View(RCO_res_l$settings_df)
library(APS)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
?xlsx::write.xlsx
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
library(APS)
runApp()
library(APS)
runApp()
View(opt_set_and_details_df)
input$xcol
input$ycol
click
class(click)
debug(APS::mydistfun)
class(lookup_df[,1])
class(lookup_df[,2])
opt_set_and_details_df$dist
library(APS)
runApp()
debug(APS::mydistfun)
class(point_v)
class(click)
runApp()
library(APS)
runApp()
debug(APS::f.writeOptdetails2xlsx)
View(optres_ma)
ix_sec
sec_nr
ix_sec <- 1:sec_nr
w_bm
library(APS)
runApp()
debug(ImplIndexPosition)
w
w_bm
shiny::runApp('G:/FAP/Equities/Betsizing/Code')
runApp('G:/FAP/Equities/Betsizing/Code')
runApp('G:/FAP/Equities/Betsizing/Code')
RCO_res_l <- APS::runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,cov_run_id=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
runApp('G:/FAP/Equities/Betsizing/Code')
call_params = commandArgs(trailingOnly = TRUE)
.libP
.libPaths()
library(c(stringi, APS))
.libPaths()
