# Calculate FAP active monthly return
FAP_actv_ret_xts <- calculate_FAP_ACTV_returns(returns_xts, weights_xts)
# calculate Others weights = 1- FAP weight
FAP_others_w_res_list <- get_FAP_others_weights_xts(dt = dt)
FAP_others_w_xts <- cbind(FAP_others_w_res_list$FAP_w_xts, FAP_others_w_res_list$others_w_xts)
colnames(FAP_others_w_xts) <- c("FAP_Total_Weight", "Others_Total_Weight")
# Calculate Others active monthly returns as value (not in %)
others_actv_returns_xts <- calc_others_avtc_ret(total_act_ret_xts = returns_xts$`S-Total`,
FAP_actv_ret_xts = FAP_actv_ret_xts$FAP_ACTV,
FAP_w_xts = FAP_others_w_xts$FAP_Total_Weight,
others_w_xts = FAP_others_w_xts$Others_Total_Weight)
# Combine FAP and Others active monthly returns as value (not in %)
FAP_others_ret_xts <- cbind(FAP_actv_ret_xts, others_actv_returns_xts)
colnames(FAP_others_ret_xts) <- c("FAP_M_ACTV", "Others_M_ACTV")
plot(FAP_others_w_xts,
main = "Weights Distribution Between FAP and Others",
legend.loc = "bottomright", col=1:20, lty = 1)
# Find FAP and Others Contribution to risk.
result_list_FAP_Others <- find_contributions(returns_xts = FAP_others_ret_xts,
weights_xts = FAP_others_w_xts)
last_date <- index(result_list_FAP_Others$pct_contrib_sd)[nrow(result_list_FAP_Others$pct_contrib_sd)]
visualize(result_list_FAP_Others, last_date, "m")
# Historical Risk Contribution
plot(result_list_FAP_Others$pct_contrib_sd * 100,
legend.loc = "bottomright",
col=1:20,
lty = 1,
main = "Risk Contribution in %")
# FAP target is 30% from total suva risk : 1.6% from target is utilized
print(result_list_FAP_Others$contribution$FAP_M_ACTV[last_date] * 0.5 * 100 / 0.3 * 100)
# Delete Total
returns_xts1 <- returns_xts[ ,which(!colnames(returns_xts) %in% "S-Total")]
weights_xts1 <- weights_xts[ ,which(!colnames(weights_xts) %in% "S-Total")]
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
setwd("C:/Projects/RiskContribution")
# Get input parameters from Excel template file
input_params_list <- get_input_params()
if(!file.exists("main_dt.RDS")){
channel <- connect_to_DB()
dt <- execute_SQL_query(con = channel, params = input_params_list$params)
saveRDS(object = dt, file = "main_dt.RDS")
}else{
dt <- readRDS("main_dt.RDS")
}
returns_weights_list <- prepare_returns_weights(dt = dt, isAggregated = TRUE)
weights_xts <- returns_weights_list$weights_xts
returns_xts <- returns_weights_list$returns_xts
plot_weights(FAP_weights_xts = weights_xts, date = index(weights_xts[nrow(weights_xts)]))
# Plot correclation matrix
corrplot(cor(returns_xts), method = "color")
# Calculate tracking error
te <- calculate_te(returns_xts, input_params_list$targets)
result_list_FAP <- find_contributions(returns_xts = returns_xts,
weights_xts = weights_xts)
date <- index(result_list_FAP$pct_contrib_sd)[nrow(result_list_FAP$pct_contrib_sd)]
#  Annualized FAP te in %
FAP_te <- round(as.numeric(result_list_FAP$main_portf_sd[date]) * sqrt(12), 6) * 100
visualize_targets(te = te$te,
utilization = te$utilization,
targets = te$targets,
FAP_te = FAP_te)
visualize(result_list_FAP, date, periodicity = "m")
# Calculate FAP active monthly return
FAP_actv_ret_xts <- calculate_FAP_ACTV_returns(returns_xts, weights_xts)
# calculate Others weights = 1- FAP weight
FAP_others_w_res_list <- get_FAP_others_weights_xts(dt = dt)
FAP_others_w_xts <- cbind(FAP_others_w_res_list$FAP_w_xts, FAP_others_w_res_list$others_w_xts)
colnames(FAP_others_w_xts) <- c("FAP_Total_Weight", "Others_Total_Weight")
# Calculate Others active monthly returns as value (not in %)
others_actv_returns_xts <- calc_others_avtc_ret(total_act_ret_xts = returns_xts$`S-Total`,
FAP_actv_ret_xts = FAP_actv_ret_xts$FAP_ACTV,
FAP_w_xts = FAP_others_w_xts$FAP_Total_Weight,
others_w_xts = FAP_others_w_xts$Others_Total_Weight)
# Combine FAP and Others active monthly returns as value (not in %)
FAP_others_ret_xts <- cbind(FAP_actv_ret_xts, others_actv_returns_xts)
colnames(FAP_others_ret_xts) <- c("FAP_M_ACTV", "Others_M_ACTV")
plot(FAP_others_w_xts,
main = "Weights Distribution Between FAP and Others",
legend.loc = "bottomright", col=1:20, lty = 1)
# Find FAP and Others Contribution to risk.
result_list_FAP_Others <- find_contributions(returns_xts = FAP_others_ret_xts,
weights_xts = FAP_others_w_xts)
last_date <- index(result_list_FAP_Others$pct_contrib_sd)[nrow(result_list_FAP_Others$pct_contrib_sd)]
visualize(result_list_FAP_Others, last_date, "m")
# Historical Risk Contribution
plot(result_list_FAP_Others$pct_contrib_sd * 100,
legend.loc = "bottomright",
col=1:20,
lty = 1,
main = "Risk Contribution in %")
# FAP target is 30% from total suva risk : 1.6% from target is utilized
print(result_list_FAP_Others$contribution$FAP_M_ACTV[last_date] * 0.5 * 100 / 0.3 * 100)
# Delete Total
returns_xts1 <- returns_xts[ ,which(!colnames(returns_xts) %in% "S-Total")]
weights_xts1 <- weights_xts[ ,which(!colnames(weights_xts) %in% "S-Total")]
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
ls(wb)
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
rm(wb)
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
wb <- loadWorkbook(file = "FAP_template.xlsm")
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
update_excel <- function(file_name, te_v, cor_ma, mapping_v, weights_xts){
# Input Parameters:
#   file_name: template file name
#   te_v: tracking errors vector
#   cor_ma: correlation matrix
#   mapping_v: names vector; values are names from DB but in Excel order, names are names from Excel
# In output Excel 3 items are filled:
#   1. Weights (last available date)
#   2. Tracking Errors (historical)
#   3. Correlation matrix
# Assumptions:
#   1. Strong assumption is template structure, since
#      columns indexes are hardcoded
if(class(te_v) == "numeric" &&
class(mapping_v) == "character" &&
"xts" %in% class(weights_xts) &&
class(cor_ma) == "matrix" &&
length(te_v) == length(mapping_v) &&
all(names(te_v) %in% mapping_v)){
# input is valid
# Prepare TE for output: change names and order
te_v <- te_v[mapping_v]
names(te_v) <- names(mapping_v)
# Change the order in correlation matrix
cor_df <- as.data.frame(cor_ma)
rownames(cor_df) <- colnames(cor_df)
cor_df <- cor_df[mapping_v, mapping_v]
rownames(cor_df) <- colnames(cor_df) <- names(mapping_v)
# Take last available date weights
weights_xts <- weights_xts[ , mapping_v]
colnames(weights_xts) <- names(mapping_v)
last_date_ind <- nrow(weights_xts)
last_weights_v <- as.numeric(weights_xts[last_date_ind, ])
# in excel the values will be converted to %
te_v <- te_v / 100
# Pay attention: if you want to change the content of a cell
# this cell must be filled in advance otherwice setCellValue generates
# an exception since  cell object does not exist
# Moreover type of a cell must be predefined: you cannot change string to int and so on
wb <- loadWorkbook(file = "FAP_template.xlsm")
ws_all <- getSheets(wb)
ws <- ws_all$FAP
# Subset required rows
len_te <- length(te_v)
first_row_ind <- 2
last_row_ind <- len_te + 1
rows <- getRows(sheet = ws, rowIndex = first_row_ind : last_row_ind)
# Pick only required columns
nrow_cor <- nrow(cor_df)
first_cor_ind <- 11
last_cor_ind <- 11 + nrow_cor - 1
col_ind <- c(3, 4, first_cor_ind : last_cor_ind)
cells <- getCells(row = rows, colIndex = col_ind)
for(cell in cells){
# starts from 0 as in Java
# All get methods give indexes as in Java
if(cell$getColumnIndex() == 3){
# tracking errors
ind <- cell$getRowIndex()
setCellValue(cell = cell, value = te_v[ind])
}else if(cell$getColumnIndex() == 2){
# weights
ind <- cell$getRowIndex()
setCellValue(cell = cell, value = last_weights_v[ind])
}
else{
# correlation matrix
ind_r <- cell$getRowIndex()
ind_c <- cell$getColumnIndex() - 9
setCellValue(cell = cell, value = cor_df[ind_r, ind_c])
}
}
saveWorkbook(wb = wb, file = "FAP_output.xlsm")
}else{
stop("update_excel1: input is not valid. Tickers are not the same or types are not correct")
}
}
update_excel(te_v = te$te,
cor_ma = cor(returns_xts1, use = "pairwise.complete.obs"),
mapping_v = input_params_list$mapping,
weights_xts = weights_xts1)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-09"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
calc_method <- "nlshrink"
if(length(call_params) > 0){
date <- call_params[2]
if(APS::isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_weights_relative
opt_weights_portfolio
risk_contribution
portfolioName
RCOSetID
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
calc_method <- "nlshrink"
date <- as.Date(date)
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
View(RCO_settings_df)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
View(w_range)
x0
as.matrix(targ$lb.)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output$status
opt_output$solution
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
sum(injuries)
opt_output$status
abs(opt_output$objective)
opt_output$status
sum(injuries)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output
set$xtol_rel
as.matrix(targ$ub.)
as.matrix(targ$lb.)
optFun$ftarget
as.matrix(targ$RiskBudget)
set$NetInvLambda
as.matrix(set$TargetTE)
targ$conviction
A <- -diag(dir)
A
opt_output$solution
dir
-A %*% opt_output$solution
injuries <- -A %*% opt_output$solution < 0
sum(injuries)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
#   2. Run this script
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output <-
nloptr::nloptr(x0 = as.matrix(x0),
eval_f = optFun$ftarget,
#eval_grad_f = fgrad,
lb = as.matrix(targ$lb.),
ub = as.matrix(targ$ub.),
# eval_g_eq = nlcon_eq,   #nlcon_eq not required
eval_g_ineq = optFun$nlcon_ineq,
opts = opts,
target_te = as.matrix(set$TargetTE),
A = A,
CashTolerance = set$CashTolerance,
LeverageTolerance = set$LeverageTolerance,
COVAR = as.matrix(cov),
rb_a = as.matrix(targ$RiskBudget),
NetInvLambda = set$NetInvLambda
)
View(opt_output)
opt_output$eval_f()
opt_output$eval_f
opt_output$eval_g_ineq()
set$xtol_rel
opts$xtol_rel <- 10^-13
opts$xtol_abs <- 10^-13
opt_output <-
nloptr::nloptr(x0 = as.matrix(x0),
eval_f = optFun$ftarget,
#eval_grad_f = fgrad,
lb = as.matrix(targ$lb.),
ub = as.matrix(targ$ub.),
# eval_g_eq = nlcon_eq,   #nlcon_eq not required
eval_g_ineq = optFun$nlcon_ineq,
opts = opts,
target_te = as.matrix(set$TargetTE),
A = A,
CashTolerance = set$CashTolerance,
LeverageTolerance = set$LeverageTolerance,
COVAR = as.matrix(cov),
rb_a = as.matrix(targ$RiskBudget),
NetInvLambda = set$NetInvLambda
)
opt_output$solution
sum(opt_output$solution)
sign(targ$conviction)
sign(opt_output$solution)
sum(injuries)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output$status
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
calc_method <- "nlshrink"
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
sign(targ$conviction)
sign(opt_output$solution)
check_sign_v
