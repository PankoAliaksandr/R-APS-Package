d <- data.frame(RCOres$SET,
na=as.factor(ifelse(is.na(RCOres$RW[1,]),"na","result")))
xtabs(~na+TargetTE,data=d)
xtabs(~na+algo,data=d)
xtabs(~na+CashTolerance,data=d)
xtabs(~na+LeverageTolerance,data=d)
xtabs(~na+IndexFlex,data=d)
#xtabs(~na+SoftLeverageConstrained,data=d)
xtabs(~na+Ix_eq_Cash,data=d)
#compare risk distribution of implemented portfolio
loopnr <- 1
RCOresPLOTTI <- RCOres
RCOresPLOTTI$optres <- RCOres$optres[,loopnr]
w <- as.numeric(RCOresPLOTTI$RW[,loopnr])
#check if total_rb_dev calculated correctly
#  rc <- get_rcb(w,RCOres$COV)
#  tfv <- rc-RCOresPLOTTI$TARG[,"RiskBudget",1]
#Q  stopifnot(round(sum(abs(tfv)),7)==round(as.numeric(RCOresPLOTTI$optres[10]),7))
w_bm <- -RCOres$TARG[,"lb",1]
w2I <- ImplIndexPosition(w,w_bm,ZeroNetInvestment=FALSE) # positions to implement
orc2I <- OptimizationResultsCharacteristics(rw=w,COV=RCOresPLOTTI$COV,lb=RCOresPLOTTI$TARG[,"lb",1],ub=RCOresPLOTTI$TARG[,"ub",1],set=2,rb_target=RCOresPLOTTI$TARG[,"RiskBudget",1]) #rw=rw;COV=COV;lb=targ$lb.;ub=targ$ub;set=set
optres2I <- c(Sys.time(),orc2I$te-RCOresPLOTTI$SET[1,"TargetTE"],orc2I$const_hit_pct,orc2I$cash,orc2I$p.beta,1,orc2I$Optim_Cash,
NA,1,1,
w2I)
RCOresPLOTTI$optres <- cbind(RCOresPLOTTI$optres,optres2I) #duplicate result column
RCOresPLOTTI$SET[2,] <-  RCOresPLOTTI$SET[1,]
RCOresPLOTTI$SET[2,"setID"] <- 2
ids <- 1:2
lapply(ids,plotSingleSetIDfromRCOres,RCOres=RCOresPLOTTI)
mult.fig(1)
barplot(t(cbind(w,w2I)),beside=T,las=2,col=c("darkblue","red"))
#replace live version
Portfolio <- "EQ_CH_SM"
f.writeOptdetails2xlsx(RCOres,Portfolio,"test",ShortIndexWithOptimCash=1,ZeroNetInvestment=FALSE)
######Analyze the results#################################
#####load previous run
{
as.of <- "2020-02-06"# Sys.Date()
Portfolio <- "EQ_CH_L"
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
RCOres <- dat
}
#########compare different runs in plots
#weights
par(mfrow=c(1,1))
f.compare_runWeights(RCOres,colby="Specif_COV")
f.compare_runWeights(RCOres,colby="Specif_COV",showRCB = TRUE )
rownames(RCOres$RW) <- substr(rownames(RCOres$RW),1,4)
barplot(t(RCOres$RW),beside=TRUE,las=2)
legend("bottomright",legend=paste("Cov:",c("Mar18-Mar20","Dez19-Mar20","dez17-dez19"),sep=""))
#xaxis and labels: rows from SET table, yaxis: rows from optim_details table
par(mfrow=c(1,1))
f.compare_runs(xaxis="CovReturns",yaxis="Net",RCOres=RCOres)
f.compare_runs(xaxis="CashTolerance",yaxis="NetInvestment",plotlabels="IndexFlex",RCOres=RCOres) #xaxis="TargetTE";yaxis="TEact-TEtarg";labs="TargetTE";RCOres=RCOres;plotlabels="Trials"
library(sfsmisc)
mult.fig(4)#compare 4 plots
f.compare_runs(xaxis="Trials",yaxis="TEact-TEtarg",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="target_function_value",RCOres=RCOres)
f.compare_runs(xaxis="TargetTE",yaxis="%weight_limits_hit",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="calctime",RCOres=RCOres)
#######draw plots for a single settings run with RCOres
plotSingleSetIDfromRCOres(setid=2,RCOres=RCOres)
#####reprint xlsx output
f.writeOptdetails2xlsx(RCOres,Portfolio,as.of,0)
#####resave results
dat <- with(RCOres,list(SET=SET,optres=optres,TARG=TARG,COV=COV))
save(dat,file=paste(filepath,Sys.Date()," RCOresTEvar.R",sep=""))
#run the RCO RISK CONTRIBUTION OPTIMIZER
rm(list=ls(all=TRUE))
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
#source("G:/FAP/Equities/Betsizing/CodeTest/scz/RCOtest.R")
######setttings#################################
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
colby <- c("Specif_COV")
#debug(compareRCOruns)
compareRCOruns(RCOres,yaxis="total_rb_dev",xaxis="TargetTE",colby,pointat=1,Jitter=1.5)
ids <- 1:nrow(RCOres$SET["setID"])
#undebug(plotSingleSetIDfromRCOres)
lapply(ids,plotSingleSetIDfromRCOres,RCOres=RCOres)
#show which TE had NA
d <- data.frame(RCOres$SET,
na=as.factor(ifelse(is.na(RCOres$RW[1,]),"na","result")))
xtabs(~na+TargetTE,data=d)
xtabs(~na+algo,data=d)
xtabs(~na+CashTolerance,data=d)
xtabs(~na+LeverageTolerance,data=d)
xtabs(~na+IndexFlex,data=d)
#xtabs(~na+SoftLeverageConstrained,data=d)
xtabs(~na+Ix_eq_Cash,data=d)
#compare risk distribution of implemented portfolio
loopnr <- 1
RCOresPLOTTI <- RCOres
RCOresPLOTTI$optres <- RCOres$optres[,loopnr]
w <- as.numeric(RCOresPLOTTI$RW[,loopnr])
#check if total_rb_dev calculated correctly
#  rc <- get_rcb(w,RCOres$COV)
#  tfv <- rc-RCOresPLOTTI$TARG[,"RiskBudget",1]
#Q  stopifnot(round(sum(abs(tfv)),7)==round(as.numeric(RCOresPLOTTI$optres[10]),7))
w_bm <- -RCOres$TARG[,"lb",1]
w2I <- ImplIndexPosition(w,w_bm,ZeroNetInvestment=FALSE) # positions to implement
orc2I <- OptimizationResultsCharacteristics(rw=w,COV=RCOresPLOTTI$COV,lb=RCOresPLOTTI$TARG[,"lb",1],ub=RCOresPLOTTI$TARG[,"ub",1],set=2,rb_target=RCOresPLOTTI$TARG[,"RiskBudget",1]) #rw=rw;COV=COV;lb=targ$lb.;ub=targ$ub;set=set
optres2I <- c(Sys.time(),orc2I$te-RCOresPLOTTI$SET[1,"TargetTE"],orc2I$const_hit_pct,orc2I$cash,orc2I$p.beta,1,orc2I$Optim_Cash,
NA,1,1,
w2I)
RCOresPLOTTI$optres <- cbind(RCOresPLOTTI$optres,optres2I) #duplicate result column
RCOresPLOTTI$SET[2,] <-  RCOresPLOTTI$SET[1,]
RCOresPLOTTI$SET[2,"setID"] <- 2
ids <- 1:2
lapply(ids,plotSingleSetIDfromRCOres,RCOres=RCOresPLOTTI)
mult.fig(1)
barplot(t(cbind(w,w2I)),beside=T,las=2,col=c("darkblue","red"))
#replace live version
Portfolio <- "EQ_CH_SM"
f.writeOptdetails2xlsx(RCOres,Portfolio,"test",ShortIndexWithOptimCash=1,ZeroNetInvestment=FALSE)
######Analyze the results#################################
#####load previous run
{
as.of <- "2020-02-06"# Sys.Date()
Portfolio <- "EQ_CH_L"
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
RCOres <- dat
}
#########compare different runs in plots
#weights
par(mfrow=c(1,1))
f.compare_runWeights(RCOres,colby="Specif_COV")
f.compare_runWeights(RCOres,colby="Specif_COV",showRCB = TRUE )
rownames(RCOres$RW) <- substr(rownames(RCOres$RW),1,4)
barplot(t(RCOres$RW),beside=TRUE,las=2)
legend("bottomright",legend=paste("Cov:",c("Mar18-Mar20","Dez19-Mar20","dez17-dez19"),sep=""))
#xaxis and labels: rows from SET table, yaxis: rows from optim_details table
par(mfrow=c(1,1))
f.compare_runs(xaxis="CovReturns",yaxis="Net",RCOres=RCOres)
f.compare_runs(xaxis="CashTolerance",yaxis="NetInvestment",plotlabels="IndexFlex",RCOres=RCOres) #xaxis="TargetTE";yaxis="TEact-TEtarg";labs="TargetTE";RCOres=RCOres;plotlabels="Trials"
library(sfsmisc)
mult.fig(4)#compare 4 plots
f.compare_runs(xaxis="Trials",yaxis="TEact-TEtarg",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="target_function_value",RCOres=RCOres)
f.compare_runs(xaxis="TargetTE",yaxis="%weight_limits_hit",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="calctime",RCOres=RCOres)
#######draw plots for a single settings run with RCOres
plotSingleSetIDfromRCOres(setid=2,RCOres=RCOres)
#####reprint xlsx output
f.writeOptdetails2xlsx(RCOres,Portfolio,as.of,0)
#####resave results
dat <- with(RCOres,list(SET=SET,optres=optres,TARG=TARG,COV=COV))
save(dat,file=paste(filepath,Sys.Date()," RCOresTEvar.R",sep=""))
#run the RCO RISK CONTRIBUTION OPTIMIZER
rm(list=ls(all=TRUE))
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
#source("G:/FAP/Equities/Betsizing/CodeTest/scz/RCOtest.R")
######setttings#################################
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
colby <- c("Specif_COV")
#debug(compareRCOruns)
compareRCOruns(RCOres,yaxis="total_rb_dev",xaxis="TargetTE",colby,pointat=1,Jitter=1.5)
ids <- 1:nrow(RCOres$SET["setID"])
#undebug(plotSingleSetIDfromRCOres)
lapply(ids,plotSingleSetIDfromRCOres,RCOres=RCOres)
#show which TE had NA
d <- data.frame(RCOres$SET,
na=as.factor(ifelse(is.na(RCOres$RW[1,]),"na","result")))
xtabs(~na+TargetTE,data=d)
xtabs(~na+algo,data=d)
xtabs(~na+CashTolerance,data=d)
xtabs(~na+LeverageTolerance,data=d)
xtabs(~na+IndexFlex,data=d)
#xtabs(~na+SoftLeverageConstrained,data=d)
xtabs(~na+Ix_eq_Cash,data=d)
#compare risk distribution of implemented portfolio
loopnr <- 1
RCOresPLOTTI <- RCOres
RCOresPLOTTI$optres <- RCOres$optres[,loopnr]
w <- as.numeric(RCOresPLOTTI$RW[,loopnr])
#check if total_rb_dev calculated correctly
#  rc <- get_rcb(w,RCOres$COV)
#  tfv <- rc-RCOresPLOTTI$TARG[,"RiskBudget",1]
#Q  stopifnot(round(sum(abs(tfv)),7)==round(as.numeric(RCOresPLOTTI$optres[10]),7))
w_bm <- -RCOres$TARG[,"lb",1]
w2I <- ImplIndexPosition(w,w_bm,ZeroNetInvestment=FALSE) # positions to implement
orc2I <- OptimizationResultsCharacteristics(rw=w,COV=RCOresPLOTTI$COV,lb=RCOresPLOTTI$TARG[,"lb",1],ub=RCOresPLOTTI$TARG[,"ub",1],set=2,rb_target=RCOresPLOTTI$TARG[,"RiskBudget",1]) #rw=rw;COV=COV;lb=targ$lb.;ub=targ$ub;set=set
optres2I <- c(Sys.time(),orc2I$te-RCOresPLOTTI$SET[1,"TargetTE"],orc2I$const_hit_pct,orc2I$cash,orc2I$p.beta,1,orc2I$Optim_Cash,
NA,1,1,
w2I)
RCOresPLOTTI$optres <- cbind(RCOresPLOTTI$optres,optres2I) #duplicate result column
RCOresPLOTTI$SET[2,] <-  RCOresPLOTTI$SET[1,]
RCOresPLOTTI$SET[2,"setID"] <- 2
ids <- 1:2
lapply(ids,plotSingleSetIDfromRCOres,RCOres=RCOresPLOTTI)
mult.fig(1)
barplot(t(cbind(w,w2I)),beside=T,las=2,col=c("darkblue","red"))
#replace live version
Portfolio <- "EQ_CH_SM"
f.writeOptdetails2xlsx(RCOres,Portfolio,"test",ShortIndexWithOptimCash=1,ZeroNetInvestment=FALSE)
######Analyze the results#################################
#####load previous run
{
as.of <- "2020-02-06"# Sys.Date()
Portfolio <- "EQ_CH_L"
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
RCOres <- dat
}
#########compare different runs in plots
#weights
par(mfrow=c(1,1))
f.compare_runWeights(RCOres,colby="Specif_COV")
f.compare_runWeights(RCOres,colby="Specif_COV",showRCB = TRUE )
rownames(RCOres$RW) <- substr(rownames(RCOres$RW),1,4)
barplot(t(RCOres$RW),beside=TRUE,las=2)
legend("bottomright",legend=paste("Cov:",c("Mar18-Mar20","Dez19-Mar20","dez17-dez19"),sep=""))
#xaxis and labels: rows from SET table, yaxis: rows from optim_details table
par(mfrow=c(1,1))
f.compare_runs(xaxis="CovReturns",yaxis="Net",RCOres=RCOres)
f.compare_runs(xaxis="CashTolerance",yaxis="NetInvestment",plotlabels="IndexFlex",RCOres=RCOres) #xaxis="TargetTE";yaxis="TEact-TEtarg";labs="TargetTE";RCOres=RCOres;plotlabels="Trials"
library(sfsmisc)
mult.fig(4)#compare 4 plots
f.compare_runs(xaxis="Trials",yaxis="TEact-TEtarg",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="target_function_value",RCOres=RCOres)
f.compare_runs(xaxis="TargetTE",yaxis="%weight_limits_hit",RCOres=RCOres)
f.compare_runs(xaxis="Trials",yaxis="calctime",RCOres=RCOres)
#######draw plots for a single settings run with RCOres
plotSingleSetIDfromRCOres(setid=2,RCOres=RCOres)
#####reprint xlsx output
f.writeOptdetails2xlsx(RCOres,Portfolio,as.of,0)
#####resave results
dat <- with(RCOres,list(SET=SET,optres=optres,TARG=TARG,COV=COV))
save(dat,file=paste(filepath,Sys.Date()," RCOresTEvar.R",sep=""))
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
#run the RCO RISK CONTRIBUTION OPTIMIZER
rm(list=ls(all=TRUE))
# source("G:/FAP/Equities/Betsizing/Code/RCO.R")
source("G:/FAP/Equities/Betsizing/CodeTest/scz/RCOtest.R")
#run the function
#undebug(runRCOLoops)
#  options(error = browser())
RCOres <- runRCOLoops(Portfolio="RE_EU"  #needed to find the right covariance!
,TargetTE = seq(0.007,0.013,0.001)
,Trials=c(100000)
,InputParameters="Signals4R"
,CovReturns=c("abs")
,Specif_COV=c(310,311,312) #c(297) #c(NA) #c(195)
,IndexFlex=FALSE #c(TRUE, FALSE)
,Ix_eq_Cash= FALSE #c(TRUE, FALSE)
,CashTolerance = 0.05 #seq(0,0.1,0.05)#seq(from=0.00,to=0.01,by=0.002), boundary for -sum(w)
,LeverageTolerance= 0.05 #seq(0,0.005,0.001)#0.025#seq(0,0.05,0.005)  #boundary for sum(w)
,algo = c("NLOPT_LD_SLSQP")# "NLOPT_LN_AUGLAG_EQ")#,"NLOPT_GN_ISRES") #"NLOPT_LD_SLSQP",  "NLOPT_LD_AUGLAG_EQ","NLOPT_LN_AUGLAG_EQ",NLOPT_LD_SLSQP","NLOPT_GN_ISRES"  #suboptimal result but optimal with X0=sol: NLOPT_LD_SLSQP,NLOPT_LD_LBFGS,NLOPT_LD_MMA(fails),
# suboptimal result even with X0=Sol: NLOPT_LD_AUGLAG
# error message nlopt_add_inequality_mconstraints returned NLOPT_INVALID_ARG: NLOPT_GD_STOGO,NLOPT_LD_AUGLAG, NLOPT_LD_TNEWTON,NLOPT_LD_TNEWTON_PRECOND
,NetInvLambda= 100# c(0,100,250,500)#10^seq(1,4,0.5)
,LowConvictionExitInDays = 100 # c(1,5,10,15,30)
,ConvictionGroups = 1 #c(1,2,5)
)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
#source("G:/FAP/Equities/Betsizing/CodeTest/scz/RCOtest.R")
ipak("shiny")
as.of <-  "2020-02-19" #
Portfolio <- "EQ_CH_L"
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
RCOres <- dat
#distance function
mydistfun <- function(values,click)
{
message("the euclidean norm is used for all values, only for numeric inputs meaningful outputs result")
#ensure is numeric
#x
if(class(values[1,1])!="numeric"){
if(class(values[1,1])=="factor"){
message("factors are transformed to numeric. Are results still meaningful?")
values[,2] <- sapply(values[,1],as.numeric.factor)
}else {warning("No procedure for the distance measuring for the class of one axis available -> cant find clicked at point!!!")}
}
#y
if(class(values[1,2])!="numeric"){
if(class(values[1,2])=="factor"){
message("factors are transformed to numeric. Are results still meaningful?")
values[,2] <- sapply(values[,2],as.numeric.factor)
}else {warning("No procedure for the distance measuring for the class of one axis available -> cant find clicked at point!!!")}
}
#calc distance
dist <- (values[,1]-click[1])^2 + (values[,2]-click[2])^2
#more sophisticated solution for distances:
#ipak("cluster")
#dist <- cluster::: daisy(rbind(click,values))
}
ui <- fluidPage(
pageWithSidebar(
headerPanel('Betsizing Evaluation'),
sidebarPanel(
selectInput('Portfolio','Portfolio',c('RE_EU','RE_CH','EQ_CH_L','EQ_CH_SM','EQ_EU_L','EQ_EU_SM')),
dateInput('datePick', 'Calculation Date', Sys.Date()),
selectInput('xcol', 'X Variable', names(RCOres$SET),
selected =  names(RCOres$SET)[1]),
selectInput('ycol', 'Y Variable', rownames(RCOres$Optim_Details),
selected= rownames(RCOres$Optim_Details)[10]),
selectizeInput('colby', 'Color by ', choices=names(RCOres$SET),
selected =  names(RCOres$SET)[c(6,7)],multiple=TRUE),
numericInput('setid', 'Setid for detailed plot', 1,
min = 1, max = nrow(RCOres$Optim_Details)),
selectInput('whichCov', 'Calc with COV',  c("used for opt","nlshrink_abs_NA","nlshrink_rel_NA"),
selected="used for opt"),
sliderInput("Jitter", "Jitter:",
min = 0, max = 1.5,
value = 0),
checkboxInput('AddSet2SQL', 'Add Settings to SQL if saved', FALSE)
),
mainPanel(column=2,
plotOutput('plot1', click = "plot1_click"),
plotOutput('plot2'),
uiOutput("tab"),
actionButton("do", "Implement current id - write it into xls")
)
)
)
server <- function(input, output, session) {
#link to wiki
url <- a("wiki", href="http://wiki.suvanet.ch/display/fai/Bets-Sizing%3A+Optimierung+und+deren+Beurteilung#Bets-Sizing%3AOptimierungundderenBeurteilung-EvaluationInShiny")
output$tab <- renderUI({
tagList("input description:", url)
})
# Combine the selected variables into a new data frame
selectedData <- reactive({
as.of <-  input$datePick
Portfolio <- input$Portfolio
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
EvalRCOres <- dat
Covtypes <- "used for opt"
for (i in dimnames(EvalRCOres$COV)[3])
{Covtypes <- c(Covtypes,as.character(i))}
updateNumericInput(session,'setid', 'setid for detailed plot', 1,
min = 1, max = nrow(EvalRCOres$Optim_Details))
updateSelectInput(session,'whichCov', 'Calc with COV', Covtypes,
selected="used for opt")
#update choice options: reduce to what has been varied!
S <- EvalRCOres$SET
varInputs <- colnames(S)[lengths(apply(S,2,unique))>1]
updateSelectInput(session,'xcol','X Variable',choices=varInputs,selected = ifelse("TargetTE" %in% varInputs,"TargetTE",varInputs[1]))
updateSelectizeInput(session,'colby','Color by ',choices=varInputs,selected=varInputs[2])
#tickbox
output$addSet2SQL <- reactive({input$AddSet2SQL})
EvalRCOres
})
output$plot1 <- renderPlot({
EvalRCOres <- selectedData()
compareRCOruns(EvalRCOres,yaxis=input$ycol,xaxis=input$xcol,colby=input$colby,pointat=input$setid,Jitter=input$Jitter,whichCov=input$whichCov)
})
output$plot2 <- renderPlot({
EvalRCOres <- selectedData()
plotSingleSetIDfromRCOres(input$setid,RCOres=EvalRCOres,covstr=input$whichCov)
})
#output message
observeEvent(input$do, {
EvalRCOres <- selectedData()
f.writeOptdetails2xlsx(EvalRCOres,input$Portfolio,"LIVE",ShortIndexWithOptimCash=1,ZeroNetInvestment=FALSE,OnlyID=input$setid)
if(input$AddSet2SQL) {
set <- EvalRCOres$SET[input$setid,]
inSQLas <- f.writeRCOsettingsToSQL(set)}else
{inSQLas <- "the settings have not been backed up in the DB"}
showModal(modalDialog(
title = paste("File for setID",input$setid,"has been written as xls-file"),
strong(paste("Its filename is",input$Portfolio,"_LIVE_optdetails.xlsx"),
br(),
"It has been written to the location:",
br(),
paste0("G:/FAP/Equities/Betsizing/R_results/",input$Portfolio),
"and its Settings are in SQL as: ",
br(),
inSQLas,
br(),
br(),
easyClose = TRUE
)))
}
)
observeEvent(input$plot1_click,
{
EvalRCOres <- selectedData()
optres <- cbind(t(EvalRCOres$Optim_Details),EvalRCOres$SET)
optres. <- optres[,c(input$xcol,input$ycol)]
click <- input$plot1_click
click <- c(click$x,click$y)
optres$dist <- mydistfun(values=optres.,click=click)
clickselected_setID <- optres[which.min(optres$dist),"setID"]
if(exists("clickselected_setID"))
{updateNumericInput(session,'setid', 'setid for detailed plot', clickselected_setID,
min = 1, max = nrow(RCOres$Optim_Details))
}
}
)
}
shiny::shinyApp(ui=ui,server=server)
