call_params[5] = 0
#   2. Run this script
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output <-
nloptr::nloptr(x0 = as.matrix(x0),
eval_f = optFun$ftarget,
#eval_grad_f = fgrad,
lb = as.matrix(targ$lb.),
ub = as.matrix(targ$ub.),
# eval_g_eq = nlcon_eq,   #nlcon_eq not required
eval_g_ineq = optFun$nlcon_ineq,
opts = opts,
target_te = as.matrix(set$TargetTE),
A = A,
CashTolerance = set$CashTolerance,
LeverageTolerance = set$LeverageTolerance,
COVAR = as.matrix(cov),
rb_a = as.matrix(targ$RiskBudget),
NetInvLambda = set$NetInvLambda
)
View(opt_output)
opt_output$eval_f()
opt_output$eval_f
opt_output$eval_g_ineq()
set$xtol_rel
opts$xtol_rel <- 10^-13
opts$xtol_abs <- 10^-13
opt_output <-
nloptr::nloptr(x0 = as.matrix(x0),
eval_f = optFun$ftarget,
#eval_grad_f = fgrad,
lb = as.matrix(targ$lb.),
ub = as.matrix(targ$ub.),
# eval_g_eq = nlcon_eq,   #nlcon_eq not required
eval_g_ineq = optFun$nlcon_ineq,
opts = opts,
target_te = as.matrix(set$TargetTE),
A = A,
CashTolerance = set$CashTolerance,
LeverageTolerance = set$LeverageTolerance,
COVAR = as.matrix(cov),
rb_a = as.matrix(targ$RiskBudget),
NetInvLambda = set$NetInvLambda
)
opt_output$solution
sum(opt_output$solution)
sign(targ$conviction)
sign(opt_output$solution)
sum(injuries)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_output$status
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
calc_method <- "nlshrink"
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
sign(targ$conviction)
sign(opt_output$solution)
check_sign_v
names_RCOres_v <- c("settings_df", "details_ma", "rw_ma", "targ_3D_array", "cov_3D_array")
"settings_df" %in% names_RCOres_v
t.query.p1 <- paste(
"SELECT max (x.RunID) maxRunID ",
"FROM betsizing.CovarianceMatrixCalculationParams x ",
"left outer join (select * from betsizing.CovarianceMatrixCalculationParams ",
"where ParamName='relativeTo') xcm ",
"on xcm.RunID=x.RunID ",
"left outer join (select * from betsizing.CovarianceMatrixCalculationParams ",
"where ParamName='CalcDT') xdate ",
"on xdate.RunID=x.RunID ",
"where xcm.ParamName is null ",
sep = ""
)
t.query.p1
"get_default_CovMaID: No Covariance matrix as specified
was calculated yet for the given portfolio"
stop("get_default_CovMaID: No Covariance matrix as specified",
"was calculated yet for the given portfolio"
)
library(APS)
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
library(APS)
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
library(APS)
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_weights_relative
opt_weights_portfolio
risk_contribution
library(APS)
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
risk_contribution
optimization_result_l$RiskContribution
row.names(target_table)
optimization_result_l$pw
opt_weights_portfolio
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
names(res_rel)
names(res_rel) == constituents
all(names(res_rel) == constituents)
n_constituents
res_rel
a <- c("a","b")
b <- c("a")
a==b
library(APS)
library(APS)
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
calcdatetime
n_constituents
portfolio
length(portfolio)
covID
setID
constituents
res_rel
length(res_rel)
length(res_p)
length(risk_contribution)
library(APS)
debug(APS::runRCOFromAPS)
# Run main function with required params
APS::runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
library(APS)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-11"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
date
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
#   2. Run this script
date <- call_params[2]
date <- as.Date(date)
calc_method <- "nlshrink"
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
date <- call_params[2]
date <- as.Date(date)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Tue Mar 24 16:32:36 2020 ------##
call_params = commandArgs(trailingOnly = TRUE)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
timestamp()
##------ Tue Mar 24 16:34:42 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Tue Mar 24 16:35:03 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params
call_params = commandArgs(trailingOnly = TRUE)
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
timestamp()
##------ Tue Mar 24 16:41:23 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-12"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Tue Mar 24 16:41:24 2020 ------##
timestamp()
##------ Tue Mar 24 16:49:42 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-13"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Tue Mar 24 16:49:43 2020 ------##
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHL"
call_params[2] = "2020-03-13"
call_params[3] = "297"
call_params[4] = "40"
call_params[5] = 0
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
source("G:/FAP/Equities/Betsizing/Code/RCO.R")
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Tue Mar 24 16:53:26 2020 ------##
debug(runRCOFromAPS)
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
opt_weights_portfolio_v
date
