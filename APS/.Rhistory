sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content"))
))
dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
header <- dashboardHeader(title = "Basic dashboard")
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
))
body <- dashboardBody(tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content"))
))
dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
header <- dashboardHeader(title = "Basic dashboard")
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
))
body <- dashboardBody(tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content"))
))
dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
header <- dashboardHeader(title = "Basic dashboard")
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
))
body <- dashboardBody(tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content"))
))
dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
header <- dashboardHeader(title = "Basic dashboard")
sidebar <- dashboardSidebar(sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
))
body <- dashboardBody(tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content"))
))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
runApp('ResultsInShinyAPS.R')
runApp('C:/Projects/Rpackage/APS/OptimizationAnalytics')
library(APS)
runApp('C:/Projects/APS/OptimizationAnalytics')
runApp()
runApp()
runApp()
runApp()
library(APS)
a <- c(T,F)
b <- c(T,T)
a|b
a&b
?points
library(APS)
runApp()
library(APS)
runApp()
library(APS)
source("G:/FAP/Equities/Betsizing/Code/RCOTest.R")
call_params = commandArgs(trailingOnly = TRUE)
call_params[1] = "APSFBEQCHSM"
call_params[2] = "2020-04-01"
call_params[3] = "313"
call_params[4] = "42"
call_params[5] = 0
debug(runRCOFromAPS)
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:03:02 2020 ------##
optimization_result_l$rw
optimization_result_l$optim_details
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:06:16 2020 ------##
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:07:44 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCOTest.R")
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:10:06 2020 ------##
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:10:34 2020 ------##
source("G:/FAP/Equities/Betsizing/Code/RCOTest.R")
source("G:/FAP/Equities/Betsizing/Code/RCOTest.R")
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:12:03 2020 ------##
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:12:09 2020 ------##
if("RODBC" %in% rownames(installed.packages()) == FALSE){
print(paste0("NLopt solver status: ", -10))
print(paste0("NLopt solver status message: Some packages are missing"))
}else{
# Nothing it is ok
}
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 11:12:17 2020 ------##
runApp()
runApp()
runApp()
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 12:13:24 2020 ------##
debug(runRCOFromAPS)
if(length(call_params) > 0){
date <- call_params[2]
if(isDate(date) == TRUE){
date <- as.Date(date)
}else{
print("parameter date is in wrong format")
stop("parameter date is in wrong format")
}
calc_method <- "nlshrink"
print(paste("For the Covariance Matrix is the CalcMethod '",calc_method,"' used",sep=""))
# Run main function with required params
runRCOFromAPS(portfolioName = call_params[1],
calculation_date = date,
covMaSetID = call_params[3],
RCOSetID = call_params[4],
isReal = FALSE,
calc_method = calc_method)
}else{
# length(call_params) <= 0
print("No arguments provided")
stop("No arguments provided")
}
timestamp()
##------ Fri Apr 03 12:13:43 2020 ------##
runApp()
# TODO line 45 degrees
graphics::abline(a = 0, b = 1, lty = 3, lwd = 0.25)
runApp()
library(APS)
runApp()
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
?graphics::text
?barplot()
runApp()
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
library(APS)
runApp()
