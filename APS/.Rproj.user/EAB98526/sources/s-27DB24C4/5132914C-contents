source("G:/FAP/Equities/Betsizing/Code/RCO.R")
#source("G:/FAP/Equities/Betsizing/CodeTest/scz/RCOtest.R")
ipak("shiny")
as.of <-  "2020-02-19" #
Portfolio <- "EQ_CH_L"
filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
load(paste(filepath,as.of," RCOres.R",sep=""))
RCOres <- dat

#distance function
mydistfun <- function(values,click)
{
  message("the euclidean norm is used for all values, only for numeric inputs meaningful outputs result")
  #ensure is numeric
  #x
  if(class(values[1,1])!="numeric"){
    if(class(values[1,1])=="factor"){
      message("factors are transformed to numeric. Are results still meaningful?")
      
      values[,2] <- sapply(values[,1],as.numeric.factor)
      
    }else {warning("No procedure for the distance measuring for the class of one axis available -> cant find clicked at point!!!")}
  }
  #y
  if(class(values[1,2])!="numeric"){
    if(class(values[1,2])=="factor"){
      message("factors are transformed to numeric. Are results still meaningful?")
      
      values[,2] <- sapply(values[,2],as.numeric.factor)
      
    }else {warning("No procedure for the distance measuring for the class of one axis available -> cant find clicked at point!!!")}
  }
  #calc distance
  dist <- (values[,1]-click[1])^2 + (values[,2]-click[2])^2
  
  #more sophisticated solution for distances:
  #ipak("cluster")
  #dist <- cluster::: daisy(rbind(click,values))
}

ui <- fluidPage(
  pageWithSidebar(
    headerPanel('Betsizing Evaluation'),
    sidebarPanel(
      selectInput('Portfolio','Portfolio',c('RE_EU','RE_CH','EQ_CH_L','EQ_CH_SM','EQ_EU_L','EQ_EU_SM')),
      dateInput('datePick', 'Calculation Date', Sys.Date()),
      selectInput('xcol', 'X Variable', names(RCOres$SET),
                  selected =  names(RCOres$SET)[1]),
      selectInput('ycol', 'Y Variable', rownames(RCOres$Optim_Details),
                  selected= rownames(RCOres$Optim_Details)[10]),
      selectizeInput('colby', 'Color by ', choices=names(RCOres$SET),
                     selected =  names(RCOres$SET)[c(6,7)],multiple=TRUE),
      numericInput('setid', 'Setid for detailed plot', 1,
                   min = 1, max = nrow(RCOres$Optim_Details)),
      selectInput('whichCov', 'Calc with COV',  c("used for opt","nlshrink_abs_NA","nlshrink_rel_NA"),
                  selected="used for opt"),
      sliderInput("Jitter", "Jitter:",
                  min = 0, max = 1.5,
                  value = 0),
      checkboxInput('AddSet2SQL', 'Add Settings to SQL if saved', FALSE)
     
    ),
    mainPanel(column=2,
              plotOutput('plot1', click = "plot1_click"),
              plotOutput('plot2'),
              uiOutput("tab"),
              actionButton("do", "Implement current id - write it into xls")
    )
  )
)
  




server <- function(input, output, session) {
  
  #link to wiki
  url <- a("wiki", href="http://wiki.suvanet.ch/display/fai/Bets-Sizing%3A+Optimierung+und+deren+Beurteilung#Bets-Sizing%3AOptimierungundderenBeurteilung-EvaluationInShiny")
  output$tab <- renderUI({
    tagList("input description:", url)
  })
  
 
  
  # Combine the selected variables into a new data frame
  selectedData <- reactive({
    as.of <-  input$datePick
    Portfolio <- input$Portfolio
    filepath <- paste("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/",sep="",collapse="")
    load(paste(filepath,as.of," RCOres.R",sep=""))
    EvalRCOres <- dat
    Covtypes <- "used for opt"
    for (i in dimnames(EvalRCOres$COV)[3])
    {Covtypes <- c(Covtypes,as.character(i))}
    
    
    updateNumericInput(session,'setid', 'setid for detailed plot', 1,
                       min = 1, max = nrow(EvalRCOres$Optim_Details))
    updateSelectInput(session,'whichCov', 'Calc with COV', Covtypes, 
                      selected="used for opt")
    
    #update choice options: reduce to what has been varied!
    S <- EvalRCOres$SET
    varInputs <- colnames(S)[lengths(apply(S,2,unique))>1]
    updateSelectInput(session,'xcol','X Variable',choices=varInputs,selected = ifelse("TargetTE" %in% varInputs,"TargetTE",varInputs[1]))
    updateSelectizeInput(session,'colby','Color by ',choices=varInputs,selected=varInputs[2])
    
    #tickbox
    output$addSet2SQL <- reactive({input$AddSet2SQL})
    
    
    EvalRCOres
  })
  
  output$plot1 <- renderPlot({
    EvalRCOres <- selectedData()
    compareRCOruns(EvalRCOres,yaxis=input$ycol,xaxis=input$xcol,colby=input$colby,pointat=input$setid,Jitter=input$Jitter,whichCov=input$whichCov)
    
  })
  
  output$plot2 <- renderPlot({
    
    EvalRCOres <- selectedData()
    plotSingleSetIDfromRCOres(input$setid,RCOres=EvalRCOres,covstr=input$whichCov)
    
    
  })
  
  #output message
  observeEvent(input$do, {
    
    EvalRCOres <- selectedData()        
    f.writeOptdetails2xlsx(EvalRCOres,input$Portfolio,"LIVE",ShortIndexWithOptimCash=1,ZeroNetInvestment=FALSE,OnlyID=input$setid)
    
    if(input$AddSet2SQL) { 
      set <- EvalRCOres$SET[input$setid,]
      inSQLas <- f.writeRCOsettingsToSQL(set)}else
        {inSQLas <- "the settings have not been backed up in the DB"}
    showModal(modalDialog(
      title = paste("File for setID",input$setid,"has been written as xls-file"),
      strong(paste("Its filename is",input$Portfolio,"_LIVE_optdetails.xlsx"),
             br(),
             "It has been written to the location:",
             br(),
             paste0("G:/FAP/Equities/Betsizing/R_results/",input$Portfolio),
             "and its Settings are in SQL as: ",
             br(),
             inSQLas,
             br(),
             br(),
             easyClose = TRUE
      )))
  }
  )
  
  observeEvent(input$plot1_click,
               {
                 EvalRCOres <- selectedData()   
                 optres <- cbind(t(EvalRCOres$Optim_Details),EvalRCOres$SET)
                 optres. <- optres[,c(input$xcol,input$ycol)]
                 click <- input$plot1_click
                 click <- c(click$x,click$y)
                 
                 optres$dist <- mydistfun(values=optres.,click=click)
                 clickselected_setID <- optres[which.min(optres$dist),"setID"]
                 
                 
                 
                 if(exists("clickselected_setID"))
                 {updateNumericInput(session,'setid', 'setid for detailed plot', clickselected_setID,
                                     min = 1, max = nrow(RCOres$Optim_Details))
                 }
               }
  )
  
}
shiny::shinyApp(ui=ui,server=server)
