# This file creates R-shiny applicatoin
# The application works as follows:
# 1. For a portfolio optimization is executed (not here)
# 2. The optimization results are saved in a file (not here)
# 3. Here the optimization results are loaded
# 4. For each portfolio normally there are several different settings tested
#       this means that here the app analyses the robustness of the optimization
#       results changing the input settings

source("G:/FAP/Equities/Betsizing/Code/RCOTest.R")
library("shiny")
as.of <-  "2020-04-02" #
Portfolio <- "RE_EU"
filepath <- paste0("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/")

# RCOres_l is loaded
load(paste(filepath,as.of," RCOres.R",sep=""))

# Depends of RCOres_l in environment
ui <- fluidPage(
  pageWithSidebar(
    headerPanel('Betsizing Evaluation'),
    sidebarPanel(
      # Portfolio
      selectInput(inputId = 'Portfolio',
                  label = 'Portfolio',
                  choices = c('RE_EU','RE_CH','EQ_CH_L','EQ_CH_SM','EQ_EU_L','EQ_EU_SM')),
      # Date
      dateInput(inputId = 'datePick',
                label = 'Calculation Date',
                value = Sys.Date()),

      # Main plot: dependent variable
      selectInput(inputId = 'xcol',
                  label = 'X Variable',
                  choices = names(RCOres_l$settings_df),
                  selected =  names(RCOres_l$settings_df)[1]),

      # Main plot: independent variable
      selectInput(inputId = 'ycol',
                  label = 'Y Variable',
                  choices = rownames(RCOres_l$details_ma),
                  selected= rownames(RCOres_l$details_ma)[10]),

      # Main plot: group by  (use the same colour for a group)
      # TODO currectly only group by 1 single variable is supported
      selectizeInput(inputId = 'colby',
                     label = 'Color by ',
                     choices = names(RCOres_l$settings_df),
                     selected =  names(RCOres_l$settings_df)[c(6)],
                     multiple = TRUE),
      # Settings ID
      numericInput(inputId = 'setid',
                   label = 'Setid for detailed plot',
                   value = 1,
                   min = 1,
                   max = nrow(RCOres_l$details_ma)),

      # Type of covariance matrix
      selectInput(inputId = 'whichCov',
                  label = 'Calc with COV',
                  choices = c("used for opt","nlshrink_abs_NA","nlshrink_rel_NA"),
                  selected = "used for opt"),

      # to add some noise
      # TODO currently is not supported
      sliderInput(inputId = "Jitter",
                  label = "Jitter:",
                  min = 0,
                  max = 1.5,
                  value = 0),

      checkboxInput(inputId = 'AddSet2SQL',
                    label = 'Add Settings to SQL if saved',
                    value = FALSE)

    ),
    mainPanel(column=2,
              plotOutput('plot1', click = "plot1_click"),
              plotOutput('plot2'),
              uiOutput("tab"),
              actionButton("do", "Implement current id - write it into xls")
    )
  )
)


server <- function(input, output, session) {

  #link to wiki
  # function a() corresponds to tag <a> in HTML5. Tag <a> is a hyperlink
  url <- a("wiki", href="http://wiki.suvanet.ch/display/fai/Bets-Sizing%3A+Optimierung+und+deren+Beurteilung#Bets-Sizing%3AOptimierungundderenBeurteilung-EvaluationInShiny")

  #
  output$tab <- renderUI({
    tagList("input description:", url)
  })



  # Combine the selected variables into a new data frame
  selectedData <- reactive({

    as.of <-  input$datePick
    Portfolio <- input$Portfolio

    filepath <- paste0("G:/FAP/Equities/Betsizing/R_results/",Portfolio,"/")
    load(paste(filepath, as.of, " RCOres.R", sep = ""))

    EvalRCOres <- RCOres_l
    Covtypes <- "used for opt"


    for (i in dimnames(EvalRCOres$cov_3D_array)[3]){
      Covtypes <- c(Covtypes, as.character(i))
    }


    updateNumericInput(session = session,
                       inputId = 'setid',
                       label = 'setid for detailed plot',
                       value = 1,
                       min = 1,
                       max = nrow(EvalRCOres$details_ma))

    updateSelectInput(session = session,
                      inputId = 'whichCov',
                      label = 'Calc with COV',
                      choices = Covtypes,
                      selected ="used for opt")

    # update choice options: reduce to what has been varied!
    settings_df <- EvalRCOres$settings_df
    # available options list: contains settings names with unique options
    avail_options_l <- apply(settings_df,2,unique)
    # There is no sense to let user vary a setting with only one available option
    set_with_sev_opt_ind <- which(lengths(avail_options_l) > 1)
    # take the corresponding settings names (with several optiones available)
    set_with_sev_opt_v <- names(avail_options_l[set_with_sev_opt_ind])

    updateSelectInput(session = session,
                      inputId = 'xcol',
                      label = 'X Variable',
                      choices = set_with_sev_opt_v,
                      selected = ifelse("TargetTE" %in% set_with_sev_opt_v,"TargetTE",set_with_sev_opt_v[1]))

    updateSelectizeInput(session = session,
                         inputId = 'colby',
                         label = 'Color by ',
                         choices = set_with_sev_opt_v,
                         selected = set_with_sev_opt_v[2])

    # tickbox
    output$addSet2SQL <- reactive({input$AddSet2SQL})

    EvalRCOres

})

  output$plot1 <- renderPlot({

    # The output is a plot
    compareRCOruns(RCOres_l = RCOres_l,
                   yaxis = input$ycol,
                   xaxis = input$xcol,
                   group_by = input$colby,
                   pointat = input$setid)

  })

  output$plot2 <- renderPlot({

    plotSingleSetIDfromRCOres(setid = input$setid,
                              RCOres_l = RCOres_l)


  })

  # Event Click: Show details for a chosen optimization settings point
  observeEvent(eventExpr = input$plot1_click, handlerExpr =
               {
                 # Start of event handler
                 # update input
                 EvalRCOres <- selectedData()
                 # Create a full set of possible options (which can be selected)
                 opt_set_and_details_df <- cbind(t(EvalRCOres$details_ma), EvalRCOres$settings_df)
                 x_y_df <- opt_set_and_details_df[,c(input$xcol,input$ycol), drop = FALSE]

                 # Get click coordinates
                 click <- input$plot1_click
                 click <- c(click$x,click$y)

                 opt_set_and_details_df$dist <- mydistfun(test = x_y_df, benchmark = click)
                 clickselected_setID <- opt_set_and_details_df[which.min(opt_set_and_details_df$dist),"setID"]



                 if(exists("clickselected_setID"))
                 {
                   updateNumericInput(session = session,
                                      inputId = 'setid',
                                      label = 'setid for detailed plot',
                                      value = clickselected_setID,
                                      min = 1,
                                      max = nrow(RCOres_l$details_ma))
                 }
               })

  #output message
  observeEvent(input$do, {

    EvalRCOres <- selectedData()

    # f.writeOptdetails2xlsx(RCOres_l = EvalRCOres,
    #                        Portfolio = input$Portfolio,
    #                        Calcdate = "LIVE",
    #                        ShortIndexWithOptimCash = 1,
    #                        ZeroNetInvestment = FALSE,
    #                        OnlyID = input$setid)

    # if(input$AddSet2SQL) {
    #   set <- EvalRCOres$SET[input$setid,]
    #   inSQLas <- f.writeRCOsettingsToSQL(set)
    # }else{
    #   inSQLas <- "the settings have not been backed up in the DB"
    # }

    # showModal(modalDialog(
    #   title = paste("File for setID",input$setid,"has been written as xls-file"),
    #   strong(paste("Its filename is",input$Portfolio,"_LIVE_optdetails.xlsx"),
    #          br(),
    #          "It has been written to the location:",
    #          br(),
    #          paste0("G:/FAP/Equities/Betsizing/R_results/",input$Portfolio),
    #          "and its Settings are in SQL as: ",
    #          br(),
    #          inSQLas,
    #          br(),
    #          br(),
    #          easyClose = TRUE
    #   )))
  }
  )
}
shiny::shinyApp(ui=ui,server=server)
